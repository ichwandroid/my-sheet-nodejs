<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css" />
</head>

<body>
  <div id="example"></div>
</body>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<script>
  const data = <%- JSON.stringify(data) %>;
  const container = document.querySelector('#example');

  const colHeaders = data.shift();

  const hiddenRows = [];
  data.forEach((row, index) => {
    if (row.every(cell => cell === '')) {
      hiddenRows.push(index);
    }
  });
  
  const hot = new Handsontable(container, {
    data: data,
    themeName: 'ht-theme-main-dark-auto',
    rowHeaders: true,
    colHeaders: colHeaders,
    height: 'auto',
    autoWrapRow: true,
    autoWrapCol: true,
    undo: true,
    manualRowResize: true,
    manualColumnResize: true,
    hiddenRows: {
      rows: hiddenRows,
      indicators: false
    },
    hiddenColumns: {
      columns: colHeaders.map((header, index) => header === '' ? index : -1).filter(index => index !== -1),
      indicators: false
    },
    licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    cells: function (row, col) {
      const cellProperties = {};
      if (col === 0 || col === 1 || col === 2) {
        cellProperties.readOnly = true;
      } else {
        cellProperties.type = 'numeric';
      }
      return cellProperties;
    },
    afterChange: function (changes, source) {
      if (source === 'loadData') {
        return; // don't save this change
      }

      changes.forEach(([row, prop, oldValue, newValue]) => {
        // Hapus tanda ' dari angka
        if (typeof newValue === 'string' && newValue.startsWith("'")) {
          newValue = newValue.slice(1);
        }

        // Perbarui nilai di Google Sheets
        const range = `SUM PAIBP!${String.fromCharCode(65 + prop)}${row + 2}`;
        const values = [[newValue || '']]; // Gunakan string kosong jika nilai dihapus

        fetch('/update-sheet', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ range, values }),
        })
        .then(response => response.text())
        .then(data => console.log(data))
        .catch(error => console.error('Error:', error));
      });
    }
  });

</script>

</html>